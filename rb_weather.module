<?php

define('CONDITIONS_URL', 'http://api.wunderground.com/api/12df1fa14a07ff78/conditions');
define('FORMAT_JSON', '.json');

/**
 * @file
 * A block module that displays weather at specified locations.
 */

/**
 * Implements hook_help().
 * 
 * Displays help and module information.
 * 
 * @param $path
 *   Which path of the site we're using to display help
 *   
 * @param $arg
 *   Array that holds the current path as returned from arg() function
 */
function rb_weather_help($path, $arg) {
	switch ($path) {
		case 'admin/help#rb_weather':
			return '<p>' . t('Displays the current weather at specified locations') . '</p>';
			break;
	}
}

/**
 * Implements hook_block_info().
 */
function rb_weather_block_info() {
	$blocks['current_weather'] = array(
			'info' => t('RB Weather - current weather block'),
			'cache' => DRUPAL_CACHE_PER_USER,
	);
	
	return $blocks;
}

/**
 * Implements hook_block_view().
 * 
 * Prepares the contents of this block for display on the site.
 */
function rb_weather_block_view($delta = '') {
	$block = array();
	
	switch ($delta) {
		case 'current_weather':
			$block['subject'] = t('RB Weather');
			$block['content'] = theme('rb_weather_weather_info', get_saved_locations_weather_data());
			break;
	}
	
	return $block;
}

/**
 * Implements hook_menu().
 */
function rb_weather_menu() {
	$items['admin/config/content/rbweather'] = array(
			'title' => t('RB Weather'),
			'description' => t('List saved weather locations'),
			'file' => 'rb_weather.admin.inc',
			'page callback' => 'drupal_get_form',
			'page arguments' => array('rb_weather_saved_locations_form'),
			'access arguments' => array('add rb_weather location'),
	);
	$items['admin/config/content/rbweather/add'] = array(
			'title' => t('Add a new location'),
			'description' => t('Configure the settings of the weather modules'),
			'file' => 'rb_weather.admin.inc',
			'page callback' => 'drupal_get_form',
			'page arguments' => array('rb_weather_locations_config_form'),
			'access arguments' => array('remove rb_weather location'),
	);
	$items['admin/config/content/rbweather/settings'] = array(
			'title' => t('Wunderground API settings'),
			'description' => t('COnfigure your API key in order to be able to pull data from Wunderground'),
			'file' => 'rb_weather.admin.inc',
			'page callback' => 'drupal_get_form',
			'page arguments' => array('rb_weather_api_settings_form'),
			'access arguments' => array('administer rb_weather api settings'),
	);

	return $items;
}

/**
 * Implements hook_permission().
 */
function rb_weather_permission() {
	return array(
			'add rb_weather location' => array(
					'title' => t('Add new locations'),
					'description' => t('Ability to add new locations at which the weather will be checked'),
			),
			'remove rb_weather location' => array(
					'title' => t('Remove locations'),
					'description' => t('Abilitz to remove the location which have already been added'),
			),
	);
}

/**
 * Implements hook_menu_local_tasks_alter().
 *
 * @param $data
 * @param $router_item
 * @param $root_path
 */
function rb_weather_menu_local_tasks_alter(&$data, $router_item, $root_path) {
	if ($root_path === 'admin/config/content/rbweather') {
			$data['actions']['output'][] = array(
					'#theme' => 'menu_local_task',
					'#link' => array(
							'title' => t('Add new location'),
							'href' => 'admin/config/content/rbweather/add',
							'localized_options' => array(
									'attributes' => array(
											'title' => t('Add new location'),
									),
							),
					),
			);
	}
}

/**
 * Implements hook_theme().
 */
function rb_weather_theme() {
	return array(
			'rb_weather_weather_info' => array(
					'template' => 'rb_weather_weather_info',
					'path' => drupal_get_path('module', 'rb_weather') . '/templates',
					'variables' => array('locations' => get_saved_locations_weather_data()),
			),
	);
}

/**
 * Implements hook_preprocess_hook().
 * 
 * @param $vars
 */
function rb_weather_preprocess_rb_weather_weather_info(&$vars) {
	drupal_add_css(drupal_get_path('module', 'rb_weather') . '/css/rb_weather.less');
}


/**
 * ================================================
 * FUNCTIONS FOR WORKING WITH THE WUNDERGROUND API
 * ================================================
 */


/**
 * Constructs an associative array of location identificators and their full names.
 *
 * @return array
 *   Associative array containing location identificators as keys
 *   and their full location names as values.
 */
function get_saved_locations() {
	$locations = array();

	$result = db_select('rb_weather_locations', 'loc')
					->fields('loc', array('weather_location_identifier', 'location_name'))
					->execute();
		
	while (($location = $result->fetchAssoc()) != FALSE) {
		$locations[$location['weather_location_identifier']] = $location['location_name'];
	}

	return $locations;
}

/**
 * Parses out the current weather conditions for the locations
 * saved in the database.
 * 
 * @return array
 *   Associative array containing location identifiers as keys
 *   and the current weather reports as values
 */
function get_saved_locations_weather_data() {
	$saved_locations = get_saved_locations();
	$weather_data = array();
	
	foreach ($saved_locations as $identifier => $location) {
		// Download current observation data from the Wunderground API
		$weather = json_decode(file_get_contents(CONDITIONS_URL . $identifier . FORMAT_JSON));
		$weather_data[] = $weather->current_observation;
	}
	
	return $weather_data;
}

/**
 * Counts how many locations have been saved.
 * 
 * @return
 *   The number of saved locations.
 */
function get_saved_locations_count() {
	return db_select('rb_weather_locations', 'loc')
				->fields('loc', array('wlid'))
				->execute()
				->rowCount();
}